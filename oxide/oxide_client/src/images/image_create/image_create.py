# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class ImageCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def image_create(
        self,
        description: str,
        name: Name,
        os: str,
        source: ImageSource,
        version: str,
        project: Optional[NameOrId] = None,
    ) -> Any:
        """
        Create a new image in a project.

        Args:
            description: Create-time parameters for an `Image`
            name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            os: The family of the operating system (e.g. Debian, Ubuntu, etc.)
            source: No description provided
            version: The version of the operating system (e.g. 18.04, 20.04, etc.)
            project: Name or ID of the project

        Returns:
            Response data
        """
        path = f"/v1/images"
        params = {}
        headers = {}
        if project is not None:
            params["project"] = project
        json_data = {
            "description": description if description is not None else None,
            "name": name if name is not None else None,
            "os": os if os is not None else None,
            "source": source if source is not None else None,
            "version": version if version is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
