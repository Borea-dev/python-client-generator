# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class InstanceSerialConsole:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def instance_serial_console(
        self,
        instance: NameOrId,
        from_start: Optional[int] = None,
        max_bytes: Optional[int] = None,
        most_recent: Optional[int] = None,
        project: Optional[NameOrId] = None,
    ) -> Any:
        """


        Args:
            instance: Name or ID of the instance
            from_start: Character index in the serial buffer from which to read, counting the bytes output since instance start. If this is not provided, `most_recent` must be provided, and if this *is* provided, `most_recent` must *not* be provided.
            max_bytes: Maximum number of bytes of buffered serial console contents to return. If the requested range runs to the end of the available buffer, the data returned will be shorter than `max_bytes`.
            most_recent: Character index in the serial buffer from which to read, counting *backward* from the most recently buffered data retrieved from the instance. (See note on `from_start` about mutual exclusivity)
            project: Name or ID of the project, only required if `instance` is provided as a `Name`

        Returns:
            Response data
        """
        path = f"/v1/instances/{instance}/serial-console"
        params = {}
        headers = {}
        if from_start is not None:
            params["from_start"] = from_start
        if max_bytes is not None:
            params["max_bytes"] = max_bytes
        if most_recent is not None:
            params["most_recent"] = most_recent
        if project is not None:
            params["project"] = project
        json_data = None

        response = self.parent._make_request(
            method="GET",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
