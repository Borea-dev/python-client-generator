# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class InstanceCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def instance_create(
        self,
        project: NameOrId,
        description: str,
        hostname: Hostname,
        memory: ByteCount,
        name: Name,
        ncpus: InstanceCpuCount,
        auto_restart_policy: Optional[InstanceAutoRestartPolicy] = None,
        boot_disk: Optional[InstanceDiskAttachment] = None,
        disks: Optional[List[InstanceDiskAttachment]] = None,
        external_ips: Optional[List[ExternalIpCreate]] = None,
        network_interfaces: Optional[InstanceNetworkInterfaceAttachment] = None,
        ssh_public_keys: Optional[List[NameOrId]] = None,
        start: Optional[bool] = None,
        user_data: Optional[str] = None,
    ) -> Any:
        """


                Args:
                    project: Name or ID of the project
                    description: Create-time parameters for an `Instance`
                    hostname: A hostname identifies a host on a network, and is usually a dot-delimited sequence of labels, where each label contains only letters, digits, or the hyphen. See RFCs 1035 and 952 for more details.
                    memory: Byte count to express memory or storage capacity.
                    name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
                    ncpus: The number of CPUs in an Instance
                    auto_restart_policy: The instance should not be automatically restarted by the control plane if it fails.
                    boot_disk: During instance creation, create and attach disks
                    disks: The disks to be created or attached for this instance.
                    external_ips: The external IP addresses provided to this instance.

        By default, all instances have outbound connectivity, but no inbound connectivity. These external addresses can be used to provide a fixed, known IP address for making inbound connections to the instance.
                    network_interfaces: Create one or more `InstanceNetworkInterface`s for the `Instance`.

        If more than one interface is provided, then the first will be designated the primary interface for the instance.
                    ssh_public_keys: An allowlist of SSH public keys to be transferred to the instance via cloud-init during instance creation.

        If not provided, all SSH public keys from the user's profile will be sent. If an empty list is provided, no public keys will be transmitted to the instance.
                    start: Should this instance be started upon creation; true by default.
                    user_data: User data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 ยง 4 (+ and / characters with padding). Maximum 32 KiB unencoded data.

                Returns:
                    Response data
        """
        path = f"/v1/instances"
        params = {}
        headers = {}
        if project is not None:
            params["project"] = project
        json_data = {
            "auto_restart_policy": auto_restart_policy
            if auto_restart_policy is not None
            else None,
            "boot_disk": boot_disk if boot_disk is not None else None,
            "description": description if description is not None else None,
            "disks": disks if disks is not None else None,
            "external_ips": external_ips if external_ips is not None else None,
            "hostname": hostname if hostname is not None else None,
            "memory": memory if memory is not None else None,
            "name": name if name is not None else None,
            "ncpus": ncpus if ncpus is not None else None,
            "network_interfaces": network_interfaces
            if network_interfaces is not None
            else None,
            "ssh_public_keys": ssh_public_keys if ssh_public_keys is not None else None,
            "start": start if start is not None else None,
            "user_data": user_data if user_data is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
