# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class VpcSubnetCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def vpc_subnet_create(
        self,
        vpc: NameOrId,
        description: str,
        ipv4_block: Ipv4Net,
        name: Name,
        project: Optional[NameOrId] = None,
        custom_router: Optional[NameOrId] = None,
        ipv6_block: Optional[Ipv6Net] = None,
    ) -> Any:
        """


        Args:
            vpc: Name or ID of the VPC
            description: Create-time parameters for a `VpcSubnet`
            ipv4_block: An IPv4 subnet, including prefix and prefix length
            name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            project: Name or ID of the project, only required if `vpc` is provided as a `Name`
            custom_router: No description provided
            ipv6_block: An IPv6 subnet, including prefix and subnet mask

        Returns:
            Response data
        """
        path = f"/v1/vpc-subnets"
        params = {}
        headers = {}
        if project is not None:
            params["project"] = project
        if vpc is not None:
            params["vpc"] = vpc
        json_data = {
            "custom_router": custom_router if custom_router is not None else None,
            "description": description if description is not None else None,
            "ipv4_block": ipv4_block if ipv4_block is not None else None,
            "ipv6_block": ipv6_block if ipv6_block is not None else None,
            "name": name if name is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
