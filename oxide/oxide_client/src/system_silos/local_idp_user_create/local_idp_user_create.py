# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class LocalIdpUserCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def local_idp_user_create(
        self,
        silo: NameOrId,
        external_id: UserId,
        password: UserPassword,
    ) -> Any:
        """
        Users can only be created in Silos with `provision_type` == `Fixed`. Otherwise, Silo users are just-in-time (JIT) provisioned when a user first logs in using an external Identity Provider.

        Args:
            silo: Name or ID of the silo
            external_id: Usernames must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Usernames cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            password: Sets the user's password to the provided value

        Returns:
            Response data
        """
        path = f"/v1/system/identity-providers/local/users"
        params = {}
        headers = {}
        if silo is not None:
            params["silo"] = silo
        json_data = {
            "external_id": external_id if external_id is not None else None,
            "password": password if password is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
