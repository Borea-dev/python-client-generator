# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class SiloCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def silo_create(
        self,
        description: str,
        discoverable: bool,
        identity_mode: SiloIdentityMode,
        name: Name,
        quotas: SiloQuotasCreate,
        tls_certificates: List[CertificateCreate],
        admin_group_name: Optional[str] = None,
        mapped_fleet_roles: Optional[Any] = None,
    ) -> Any:
        """


                Args:
                    description: Create-time parameters for a `Silo`
                    discoverable: Create-time parameters for a `Silo`
                    identity_mode: Users are authenticated with SAML using an external authentication provider.  The system updates information about users and groups only during successful authentication (i.e,. "JIT provisioning" of users and groups).
                    name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
                    quotas: The amount of provisionable resources for a Silo
                    tls_certificates: Initial TLS certificates to be used for the new Silo's console and API endpoints.  These should be valid for the Silo's DNS name(s).
                    admin_group_name: If set, this group will be created during Silo creation and granted the "Silo Admin" role. Identity providers can assert that users belong to this group and those users can log in and further initialize the Silo.

        Note that if configuring a SAML based identity provider, group_attribute_name must be set for users to be considered part of a group. See `SamlIdentityProviderCreate` for more information.
                    mapped_fleet_roles: Mapping of which Fleet roles are conferred by each Silo role

        The default is that no Fleet roles are conferred by any Silo roles unless there's a corresponding entry in this map.

                Returns:
                    Response data
        """
        path = f"/v1/system/silos"
        params = None
        headers = None
        json_data = {
            "admin_group_name": admin_group_name
            if admin_group_name is not None
            else None,
            "description": description if description is not None else None,
            "discoverable": discoverable if discoverable is not None else None,
            "identity_mode": identity_mode if identity_mode is not None else None,
            "mapped_fleet_roles": mapped_fleet_roles
            if mapped_fleet_roles is not None
            else None,
            "name": name if name is not None else None,
            "quotas": quotas if quotas is not None else None,
            "tls_certificates": tls_certificates
            if tls_certificates is not None
            else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
