# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class SamlIdentityProviderCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def saml_identity_provider_create(
        self,
        silo: NameOrId,
        acs_url: str,
        description: str,
        idp_entity_id: str,
        idp_metadata_source: IdpMetadataSource,
        name: Name,
        slo_url: str,
        sp_client_id: str,
        technical_contact_email: str,
        group_attribute_name: Optional[str] = None,
        signing_keypair: Optional[DerEncodedKeyPair] = None,
    ) -> Any:
        """


        Args:
            silo: Name or ID of the silo
            acs_url: service provider endpoint where the response will be sent
            description: Create-time identity-related parameters
            idp_entity_id: idp's entity id
            idp_metadata_source: No description provided
            name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            slo_url: service provider endpoint where the idp should send log out requests
            sp_client_id: sp's client id
            technical_contact_email: customer's technical contact for saml configuration
            group_attribute_name: If set, SAML attributes with this name will be considered to denote a user's group membership, where the attribute value(s) should be a comma-separated list of group names.
            signing_keypair: No description provided

        Returns:
            Response data
        """
        path = f"/v1/system/identity-providers/saml"
        params = {}
        headers = {}
        if silo is not None:
            params["silo"] = silo
        json_data = {
            "acs_url": acs_url if acs_url is not None else None,
            "description": description if description is not None else None,
            "group_attribute_name": group_attribute_name
            if group_attribute_name is not None
            else None,
            "idp_entity_id": idp_entity_id if idp_entity_id is not None else None,
            "idp_metadata_source": idp_metadata_source
            if idp_metadata_source is not None
            else None,
            "name": name if name is not None else None,
            "signing_keypair": signing_keypair if signing_keypair is not None else None,
            "slo_url": slo_url if slo_url is not None else None,
            "sp_client_id": sp_client_id if sp_client_id is not None else None,
            "technical_contact_email": technical_contact_email
            if technical_contact_email is not None
            else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
