# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class NetworkingLoopbackAddressCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def networking_loopback_address_create(
        self,
        address: str,
        address_lot: NameOrId,
        anycast: bool,
        mask: int,
        rack_id: str,
        switch_location: Name,
    ) -> Any:
        """


        Args:
            address: The address to create.
            address_lot: No description provided
            anycast: Address is an anycast address. This allows the address to be assigned to multiple locations simultaneously.
            mask: The subnet mask to use for the address.
            rack_id: The containing the switch this loopback address will be configured on.
            switch_location: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.

        Returns:
            Response data
        """
        path = f"/v1/system/networking/loopback-address"
        params = None
        headers = None
        json_data = {
            "address": address if address is not None else None,
            "address_lot": address_lot if address_lot is not None else None,
            "anycast": anycast if anycast is not None else None,
            "mask": mask if mask is not None else None,
            "rack_id": rack_id if rack_id is not None else None,
            "switch_location": switch_location if switch_location is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
