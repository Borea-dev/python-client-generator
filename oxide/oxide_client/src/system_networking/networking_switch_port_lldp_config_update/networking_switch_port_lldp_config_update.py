# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class NetworkingSwitchPortLldpConfigUpdate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def networking_switch_port_lldp_config_update(
        self,
        port: Name,
        rack_id: str,
        switch_location: Name,
        enabled: bool,
        id: str,
        chassis_id: Optional[str] = None,
        link_description: Optional[str] = None,
        link_name: Optional[str] = None,
        management_ip: Optional[IpNet] = None,
        system_description: Optional[str] = None,
        system_name: Optional[str] = None,
    ) -> Any:
        """


        Args:
            port: A name to use when selecting switch ports.
            rack_id: A rack id to use when selecting switch ports.
            switch_location: A switch location to use when selecting switch ports.
            enabled: Whether or not the LLDP service is enabled.
            id: The id of this LLDP service instance.
            chassis_id: The LLDP chassis identifier TLV.
            link_description: The LLDP link description TLV.
            link_name: The LLDP link name TLV.
            management_ip: An IPv4 subnet, including prefix and prefix length
            system_description: The LLDP system description TLV.
            system_name: The LLDP system name TLV.

        Returns:
            Response data
        """
        path = f"/v1/system/hardware/switch-port/{port}/lldp/config"
        params = {}
        headers = {}
        if rack_id is not None:
            params["rack_id"] = rack_id
        if switch_location is not None:
            params["switch_location"] = switch_location
        json_data = {
            "chassis_id": chassis_id if chassis_id is not None else None,
            "enabled": enabled if enabled is not None else None,
            "id": id if id is not None else None,
            "link_description": link_description
            if link_description is not None
            else None,
            "link_name": link_name if link_name is not None else None,
            "management_ip": management_ip if management_ip is not None else None,
            "system_description": system_description
            if system_description is not None
            else None,
            "system_name": system_name if system_name is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
