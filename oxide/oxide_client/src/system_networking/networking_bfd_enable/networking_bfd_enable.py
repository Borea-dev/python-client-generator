# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class NetworkingBfdEnable:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def networking_bfd_enable(
        self,
        detection_threshold: int,
        mode: BfdMode,
        remote: str,
        required_rx: int,
        switch: Name,
        local: Optional[str] = None,
    ) -> Any:
        """


        Args:
            detection_threshold: The negotiated Control packet transmission interval, multiplied by this variable, will be the Detection Time for this session (as seen by the remote system)
            mode: BFD connection mode.
            remote: Address of the remote peer to establish a BFD session with.
            required_rx: The minimum interval, in microseconds, between received BFD Control packets that this system requires
            switch: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            local: Address the Oxide switch will listen on for BFD traffic. If `None` then the unspecified address (0.0.0.0 or ::) is used.

        Returns:
            Response data
        """
        path = f"/v1/system/networking/bfd-enable"
        params = None
        headers = None
        json_data = {
            "detection_threshold": (
                detection_threshold if detection_threshold is not None else None
            ),
            "local": local if local is not None else None,
            "mode": mode if mode is not None else None,
            "remote": remote if remote is not None else None,
            "required_rx": required_rx if required_rx is not None else None,
            "switch": switch if switch is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
