# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class NetworkingSwitchPortSettingsCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def networking_switch_port_settings_create(
        self,
        addresses: Any,
        bgp_peers: Any,
        description: str,
        groups: List[NameOrId],
        interfaces: Any,
        links: Any,
        name: Name,
        port_config: SwitchPortConfigCreate,
        routes: Any,
    ) -> Any:
        """


        Args:
            addresses: Addresses indexed by interface name.
            bgp_peers: BGP peers indexed by interface name.
            description: Parameters for creating switch port settings. Switch port settings are the central data structure for setting up external networking. Switch port settings include link, interface, route, address and dynamic network protocol configuration.
            groups: Parameters for creating switch port settings. Switch port settings are the central data structure for setting up external networking. Switch port settings include link, interface, route, address and dynamic network protocol configuration.
            interfaces: Interfaces indexed by link name.
            links: Links indexed by phy name. On ports that are not broken out, this is always phy0. On a 2x breakout the options are phy0 and phy1, on 4x phy0-phy3, etc.
            name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            port_config: Physical switch port configuration.
            routes: Routes indexed by interface name.

        Returns:
            Response data
        """
        path = f"/v1/system/networking/switch-port-settings"
        params = None
        headers = None
        json_data = {
            "addresses": addresses if addresses is not None else None,
            "bgp_peers": bgp_peers if bgp_peers is not None else None,
            "description": description if description is not None else None,
            "groups": groups if groups is not None else None,
            "interfaces": interfaces if interfaces is not None else None,
            "links": links if links is not None else None,
            "name": name if name is not None else None,
            "port_config": port_config if port_config is not None else None,
            "routes": routes if routes is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
