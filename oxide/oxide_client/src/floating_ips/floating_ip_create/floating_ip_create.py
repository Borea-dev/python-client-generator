# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...oxide_region_api import OxideRegionAPI


class FloatingIpCreate:
    def __init__(self, parent: "OxideRegionAPI"):
        self.parent = parent

    def floating_ip_create(
        self,
        project: NameOrId,
        description: str,
        name: Name,
        ip: Optional[str] = None,
        pool: Optional[NameOrId] = None,
    ) -> Any:
        """


        Args:
            project: Name or ID of the project
            description: Parameters for creating a new floating IP address for instances.
            name: Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.
            ip: An IP address to reserve for use as a floating IP. This field is optional: when not set, an address will be automatically chosen from `pool`. If set, then the IP must be available in the resolved `pool`.
            pool: No description provided

        Returns:
            Response data
        """
        path = f"/v1/floating-ips"
        params = {}
        headers = {}
        if project is not None:
            params["project"] = project
        json_data = {
            "description": description if description is not None else None,
            "ip": ip if ip is not None else None,
            "name": name if name is not None else None,
            "pool": pool if pool is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
