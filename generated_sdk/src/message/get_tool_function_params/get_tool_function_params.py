# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class GetToolFunctionParams:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def get_tool_function_params(
        self,
        tr_dataset: str,
        tool_function: ToolFunction,
        audio_input: Optional[str] = None,
        image_url: Optional[str] = None,
        model: Optional[str] = None,
        user_message_text: Optional[str] = None,
    ) -> Any:
        """
        This endpoint will generate the parameters for a tool function based on the user's message and image URL provided in the request body. The response will include the parameters for the tool function as a JSON object.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            tool_function: Function for a LLM tool call
            audio_input: The base64 encoded audio input of the user message to attach to the topic and then generate an assistant message in response to.
            image_url: Image URL to attach to the message to generate the parameters for the tool function.
            model: Model name to use for the completion. If not specified, this defaults to the dataset's model.
            user_message_text: Text of the user's message to the assistant which will be used to generate the parameters for the tool function.

        Returns:
            Response data
        """
        path = f"/api/message/get_tool_function_params"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "audio_input": audio_input if audio_input is not None else None,
            "image_url": image_url if image_url is not None else None,
            "model": model if model is not None else None,
            "tool_function": tool_function if tool_function is not None else None,
            "user_message_text": (
                user_message_text if user_message_text is not None else None
            ),
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
