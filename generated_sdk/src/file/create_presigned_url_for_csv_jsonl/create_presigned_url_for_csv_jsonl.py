# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class CreatePresignedUrlForCsvJsonl:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def create_presigned_url_for_csv_jsonl(
        self,
        tr_dataset: str,
        file_name: str,
        description: Optional[str] = None,
        fulltext_boost_factor: Optional[float] = None,
        group_tracking_id: Optional[str] = None,
        link: Optional[str] = None,
        mappings: Optional[ChunkReqPayloadMappings] = None,
        metadata: Optional[Any] = None,
        semantic_boost_factor: Optional[float] = None,
        tag_set: Optional[List[str]] = None,
        time_stamp: Optional[str] = None,
        upsert_by_tracking_id: Optional[bool] = None,
    ) -> Any:
        """
        This route is useful for uploading very large CSV or JSONL files. Once you have completed the upload, chunks will be automatically created from the file for each line in the CSV or JSONL file. The chunks will be indexed and searchable. Auth'ed user must be an admin or owner of the dataset's organization to upload a file.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            file_name: Name of the file being uploaded, including the extension. Will be used to determine CSV or JSONL for processing.
            description: Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk.
            fulltext_boost_factor: Amount to multiplicatevly increase the frequency of the tokens in the boost phrase for each row's chunk by. Applies to fulltext (SPLADE) and keyword (BM25) search.
            group_tracking_id: Group tracking id is an optional field which allows you to specify the tracking id of the group that is created from the file. Chunks created will be created with the tracking id of `group_tracking_id|<index of chunk>`
            link: Link to the file. This can also be any string. This can be used to filter when searching for the file's resulting chunks. The link value will not affect embedding creation.
            mappings: Specify all of the mappings between columns or fields in a CSV or JSONL file and keys in the ChunkReqPayload. Array fields like tag_set, image_urls, and group_tracking_ids can have multiple mappings. Boost phrase can also have multiple mappings which get concatenated. Other fields can only have one mapping and only the last mapping will be used.
            metadata: Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file's chunks.
            semantic_boost_factor: Arbitrary float (positive or negative) specifying the multiplicate factor to apply before summing the phrase vector with the chunk_html embedding vector. Applies to semantic (embedding model) search.
            tag_set: Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Each tag will be joined with what's creatd per row of the CSV or JSONL file.
            time_stamp: Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file's chunks.
            upsert_by_tracking_id: Upsert by tracking_id. If true, chunks will be upserted by tracking_id. If false, chunks with the same tracking_id as another already existing chunk will be ignored. Defaults to true.

        Returns:
            Response data
        """
        path = f"/api/file/csv_or_jsonl"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "description": description if description is not None else None,
            "file_name": file_name if file_name is not None else None,
            "fulltext_boost_factor": (
                fulltext_boost_factor if fulltext_boost_factor is not None else None
            ),
            "group_tracking_id": (
                group_tracking_id if group_tracking_id is not None else None
            ),
            "link": link if link is not None else None,
            "mappings": mappings if mappings is not None else None,
            "metadata": metadata if metadata is not None else None,
            "semantic_boost_factor": (
                semantic_boost_factor if semantic_boost_factor is not None else None
            ),
            "tag_set": tag_set if tag_set is not None else None,
            "time_stamp": time_stamp if time_stamp is not None else None,
            "upsert_by_tracking_id": (
                upsert_by_tracking_id if upsert_by_tracking_id is not None else None
            ),
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
