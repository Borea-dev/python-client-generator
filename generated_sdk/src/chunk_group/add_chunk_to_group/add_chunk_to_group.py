# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class AddChunkToGroup:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def add_chunk_to_group(
        self,
        tr_dataset: str,
        group_id: str,
        chunk_id: Optional[str] = None,
        chunk_tracking_id: Optional[str] = None,
    ) -> Any:
        """
        Route to add a chunk to a group. One of chunk_id or chunk_tracking_id must be provided. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            group_id: Id of the group to add the chunk to as a bookmark
            chunk_id: Id of the chunk to make a member of the group.
            chunk_tracking_id: Tracking Id of the chunk to make a member of the group.

        Returns:
            Response data
        """
        path = f"/api/chunk_group/chunk/{group_id}"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "chunk_id": chunk_id if chunk_id is not None else None,
            "chunk_tracking_id": (
                chunk_tracking_id if chunk_tracking_id is not None else None
            ),
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
