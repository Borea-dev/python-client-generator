# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class UpdateChunkGroup:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def update_chunk_group(
        self,
        tr_dataset: str,
        description: Optional[str] = None,
        group_id: Optional[str] = None,
        metadata: Optional[Any] = None,
        name: Optional[str] = None,
        tag_set: Optional[List[str]] = None,
        tracking_id: Optional[str] = None,
        update_chunks: Optional[bool] = None,
    ) -> Any:
        """
                Update a chunk_group. One of group_id or tracking_id must be provided. If you try to change the tracking_id to one that already exists, this operation will fail. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

                Args:
                    tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
                    description: Description to assign to the chunk_group. Convenience field for you to avoid having to remember what the group is for. If not provided, the description will not be updated.
                    group_id: Id of the chunk_group to update.
                    metadata: Optional metadata to assign to the chunk_group. This is a JSON object that can store any additional information you want to associate with the chunks inside of the chunk_group.
                    name: Name to assign to the chunk_group. Does not need to be unique. If not provided, the name will not be updated.
                    tag_set: Optional tags to assign to the chunk_group. This is a list of strings that can be used to categorize the chunks inside the chunk_group.
                    tracking_id: Tracking Id of the chunk_group to update.
                    update_chunks: Flag to update the chunks in the group. If true, each chunk in the group will be updated
        by appending the group's tags to the chunk's tags. Default is false.

                Returns:
                    Response data
        """
        path = f"/api/chunk_group"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "description": description if description is not None else None,
            "group_id": group_id if group_id is not None else None,
            "metadata": metadata if metadata is not None else None,
            "name": name if name is not None else None,
            "tag_set": tag_set if tag_set is not None else None,
            "tracking_id": tracking_id if tracking_id is not None else None,
            "update_chunks": update_chunks if update_chunks is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="PUT",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
