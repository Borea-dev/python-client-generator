# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class SendCtrData:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def send_ctr_data(
        self,
        tr_dataset: str,
        ctr_type: CTRType,
        position: int,
        request_id: str,
        clicked_chunk_id: Optional[str] = None,
        clicked_chunk_tracking_id: Optional[str] = None,
        metadata: Optional[Any] = None,
    ) -> Any:
        """
        This route allows you to send clickstream data to the system. Clickstream data is used to fine-tune the re-ranking of search results and recommendations.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            ctr_type: No description provided
            position: The position of the clicked chunk
            request_id: The request id for the CTR data
            clicked_chunk_id: The ID of chunk that was clicked
            clicked_chunk_tracking_id: The tracking ID of the chunk that was clicked
            metadata: Any metadata you want to include with the event i.e. action, user_id, etc.

        Returns:
            Response data
        """
        path = f"/api/analytics/ctr"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "clicked_chunk_id": (
                clicked_chunk_id if clicked_chunk_id is not None else None
            ),
            "clicked_chunk_tracking_id": (
                clicked_chunk_tracking_id
                if clicked_chunk_tracking_id is not None
                else None
            ),
            "ctr_type": ctr_type if ctr_type is not None else None,
            "metadata": metadata if metadata is not None else None,
            "position": position if position is not None else None,
            "request_id": request_id if request_id is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="PUT",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
