# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class GetTopDatasets:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def get_top_datasets(
        self,
        tr_organization: str,
        type: TopDatasetsRequestTypes,
        date_range: Optional[DateRange] = None,
    ) -> Any:
        """
        This route allows you to view the top datasets for a given type.

        Args:
            tr_organization: The organization id to use for the request
            type: No description provided
            date_range: DateRange is a JSON object which can be used to filter chunks by a range of dates. This leverages the time_stamp field on chunks in your dataset. You can specify this if you want values in a certain range. You must provide ISO 8601 combined date and time without timezone.

        Returns:
            Response data
        """
        path = f"/api/analytics/top"
        params = {}
        headers = {}
        if tr_organization is not None:
            headers["TR-Organization"] = tr_organization
        json_data = {
            "date_range": date_range if date_range is not None else None,
            "type": type if type is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
