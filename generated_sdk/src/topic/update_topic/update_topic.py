# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class UpdateTopic:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def update_topic(
        self,
        tr_dataset: str,
        name: str,
        topic_id: str,
    ) -> Any:
        """
        Update an existing chat topic. Currently, only the name of the topic can be updated. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            name: The new name of the topic. A name is not generated from this field, it is used as-is.
            topic_id: The id of the topic to target.

        Returns:
            Response data
        """
        path = f"/api/topic"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "name": name if name is not None else None,
            "topic_id": topic_id if topic_id is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="PUT",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
