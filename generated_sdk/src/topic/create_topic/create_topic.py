# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class CreateTopic:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def create_topic(
        self,
        tr_dataset: str,
        owner_id: str,
        first_user_message: Optional[str] = None,
        name: Optional[str] = None,
    ) -> Any:
        """
        Create a new chat topic. Topics are attached to a owner_id's and act as a coordinator for conversation message history of gen-AI chat sessions. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            owner_id: The owner_id of the topic. This is typically a browser fingerprint or your user's id. It is used to group topics together for a user.
            first_user_message: The first message which will belong to the topic. The topic name is generated based on this message similar to how it works in the OpenAI chat UX if a name is not explicitly provided on the name request body key.
            name: The name of the topic. If this is not provided, the topic name is generated from the first_user_message.

        Returns:
            Response data
        """
        path = f"/api/topic"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "first_user_message": (
                first_user_message if first_user_message is not None else None
            ),
            "name": name if name is not None else None,
            "owner_id": owner_id if owner_id is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
