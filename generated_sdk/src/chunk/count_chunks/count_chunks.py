# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class CountChunks:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def count_chunks(
        self,
        tr_dataset: str,
        query: QueryTypes,
        search_type: CountSearchMethod,
        filters: Optional[ChunkFilter] = None,
        limit: Optional[int] = None,
        score_threshold: Optional[float] = None,
        use_quote_negated_terms: Optional[bool] = None,
    ) -> Any:
        """
        This route can be used to determine the number of chunk results that match a search query including score threshold and filters. It may be high latency for large limits. There is a dataset configuration imposed restriction on the maximum limit value (default 10,000) which is used to prevent DDOS attacks. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            query: No description provided
            search_type: No description provided
            filters: ChunkFilter is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.
            limit: Set limit to restrict the maximum number of chunks to count. This is useful for when you want to reduce the latency of the count operation. By default the limit will be the number of chunks in the dataset.
            score_threshold: Set score_threshold to a float to filter out chunks with a score below the threshold. This threshold applies before weight and bias modifications. If not specified, this defaults to 0.0.
            use_quote_negated_terms: If true, quoted and - prefixed words will be parsed from the queries and used as required and negated words respectively. Default is false.

        Returns:
            Response data
        """
        path = f"/api/chunk/count"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "filters": filters if filters is not None else None,
            "limit": limit if limit is not None else None,
            "query": query if query is not None else None,
            "score_threshold": score_threshold if score_threshold is not None else None,
            "search_type": search_type if search_type is not None else None,
            "use_quote_negated_terms": (
                use_quote_negated_terms if use_quote_negated_terms is not None else None
            ),
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
