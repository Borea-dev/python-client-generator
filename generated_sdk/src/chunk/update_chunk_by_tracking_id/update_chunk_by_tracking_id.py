# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class UpdateChunkByTrackingId:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def update_chunk_by_tracking_id(
        self,
        tr_dataset: str,
        tracking_id: str,
        chunk_html: Optional[str] = None,
        convert_html_to_text: Optional[bool] = None,
        group_ids: Optional[List[str]] = None,
        group_tracking_ids: Optional[List[str]] = None,
        link: Optional[str] = None,
        metadata: Optional[Any] = None,
        time_stamp: Optional[str] = None,
        weight: Optional[float] = None,
    ) -> Any:
        """
        Update a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk. Auth'ed user or api key must have an admin or owner role for the specified dataset's organization.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            tracking_id: Tracking_id of the chunk you want to update. This is required to match an existing chunk.
            chunk_html: HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used.
            convert_html_to_text: Convert HTML to raw text before processing to avoid adding noise to the vector embeddings. By default this is true. If you are using HTML content that you want to be included in the vector embeddings, set this to false.
            group_ids: Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
            group_tracking_ids: Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
            link: Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used.
            metadata: The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used.
            time_stamp: Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used.
            weight: Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk's dataset dataset. If no weight is provided, the existing weight will be used.

        Returns:
            Response data
        """
        path = f"/api/chunk/tracking_id/update"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "chunk_html": chunk_html if chunk_html is not None else None,
            "convert_html_to_text": (
                convert_html_to_text if convert_html_to_text is not None else None
            ),
            "group_ids": group_ids if group_ids is not None else None,
            "group_tracking_ids": (
                group_tracking_ids if group_tracking_ids is not None else None
            ),
            "link": link if link is not None else None,
            "metadata": metadata if metadata is not None else None,
            "time_stamp": time_stamp if time_stamp is not None else None,
            "tracking_id": tracking_id if tracking_id is not None else None,
            "weight": weight if weight is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="PUT",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
