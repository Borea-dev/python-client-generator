# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class ScrollDatasetChunks:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def scroll_dataset_chunks(
        self,
        tr_dataset: str,
        filters: Optional[ChunkFilter] = None,
        offset_chunk_id: Optional[str] = None,
        page_size: Optional[int] = None,
        sort_by: Optional[SortByField] = None,
    ) -> Any:
        """
        Get paginated chunks from your dataset with filters and custom sorting. If sort by is not specified, the results will sort by the id's of the chunks in ascending order. Sort by and offset_chunk_id cannot be used together; if you want to scroll with a sort by then you need to use a must_not filter with the ids you have already seen. There is a limit of 1000 id's in a must_not filter at a time.

        Args:
            tr_dataset: The dataset id or tracking_id to use for the request. We assume you intend to use an id if the value is a valid uuid.
            filters: ChunkFilter is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.
            offset_chunk_id: Offset chunk id is the id of the chunk to start the page from. If not specified, this defaults to the first chunk in the dataset sorted by id ascending.
            page_size: Page size is the number of chunks to fetch. This can be used to fetch more than 10 chunks at a time.
            sort_by: No description provided

        Returns:
            Response data
        """
        path = f"/api/chunks/scroll"
        params = {}
        headers = {}
        if tr_dataset is not None:
            headers["TR-Dataset"] = tr_dataset
        json_data = {
            "filters": filters if filters is not None else None,
            "offset_chunk_id": offset_chunk_id if offset_chunk_id is not None else None,
            "page_size": page_size if page_size is not None else None,
            "sort_by": sort_by if sort_by is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
