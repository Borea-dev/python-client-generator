# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class CreateOrganizationApiKey:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def create_organization_api_key(
        self,
        tr_organization: str,
        name: str,
        role: int,
        dataset_ids: Optional[List[str]] = None,
        default_params: Optional[ApiKeyRequestParams] = None,
        expires_at: Optional[str] = None,
        scopes: Optional[List[str]] = None,
    ) -> Any:
        """
        Create a new api key for the organization. Successful response will contain the newly created api key.

        Args:
            tr_organization: The organization id to use for the request.
            name: The name which will be assigned to the new api key.
            role: The role which will be assigned to the new api key. Either 0 (read), 1 (Admin) or 2 (Owner). The auth'ed user must have a role greater than or equal to the role being assigned.
            dataset_ids: The dataset ids which the api key will have access to. If not provided or empty, the api key will have access to all datasets in the dataset.
            default_params: The default parameters which will be forcibly used when the api key is given on a request. If not provided, the api key will not have default parameters.
            expires_at: The expiration date of the api key. If not provided, the api key will not expire. This should be provided in UTC time.
            scopes: The routes which the api key will have access to. If not provided or empty, the api key will have access to all routes. Specify the routes as a list of strings. For example, ["GET /api/dataset", "POST /api/dataset"].

        Returns:
            Response data
        """
        path = f"/api/organization/api_key"
        params = {}
        headers = {}
        if tr_organization is not None:
            headers["TR-Organization"] = tr_organization
        json_data = {
            "dataset_ids": dataset_ids if dataset_ids is not None else None,
            "default_params": default_params if default_params is not None else None,
            "expires_at": expires_at if expires_at is not None else None,
            "name": name if name is not None else None,
            "role": role if role is not None else None,
            "scopes": scopes if scopes is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
