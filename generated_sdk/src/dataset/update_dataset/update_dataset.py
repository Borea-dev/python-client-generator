# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class UpdateDataset:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def update_dataset(
        self,
        tr_organization: str,
        dataset_id: Optional[str] = None,
        dataset_name: Optional[str] = None,
        new_tracking_id: Optional[str] = None,
        server_configuration: Optional[DatasetConfigurationDTO] = None,
        tracking_id: Optional[str] = None,
    ) -> Any:
        """
        One of id or tracking_id must be provided. The auth'ed user must be an owner of the organization to update a dataset.

        Args:
            tr_organization: The organization id to use for the request
            dataset_id: The id of the dataset you want to update.
            dataset_name: The new name of the dataset. Must be unique within the organization. If not provided, the name will not be updated.
            new_tracking_id: Optional new tracking ID for the dataset. Can be used to track the dataset in external systems. Must be unique within the organization. If not provided, the tracking ID will not be updated. Strongly recommended to not use a valid uuid value as that will not work with the TR-Dataset header.
            server_configuration: Lets you specify the configuration for a dataset
            tracking_id: The tracking ID of the dataset you want to update.

        Returns:
            Response data
        """
        path = f"/api/dataset"
        params = {}
        headers = {}
        if tr_organization is not None:
            headers["TR-Organization"] = tr_organization
        json_data = {
            "dataset_id": dataset_id if dataset_id is not None else None,
            "dataset_name": dataset_name if dataset_name is not None else None,
            "new_tracking_id": new_tracking_id if new_tracking_id is not None else None,
            "server_configuration": (
                server_configuration if server_configuration is not None else None
            ),
            "tracking_id": tracking_id if tracking_id is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="PUT",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
