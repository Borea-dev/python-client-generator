# generated by borea

# if you want to edit this file, add it to ignores in borea.config.json, glob syntax

# TODO: not implemented

from typing import Any, Dict, List, Optional, Union, TYPE_CHECKING
from ....models.models import *

if TYPE_CHECKING:
    from ...trieve_api import TrieveApi


class BatchCreateDatasets:
    def __init__(self, parent: "TrieveApi"):
        self.parent = parent

    def batch_create_datasets(
        self,
        tr_organization: str,
        datasets: List[CreateBatchDataset],
        upsert: Optional[bool] = None,
    ) -> Any:
        """
        Datasets will be created in the org specified via the TR-Organization header. Auth'ed user must be an owner of the organization to create datasets. If a tracking_id is ignored due to it already existing on the org, the response will not contain a dataset with that tracking_id and it can be assumed that a dataset with the missing tracking_id already exists.

        Args:
            tr_organization: The organization id to use for the request
            datasets: List of datasets to create
            upsert: Upsert when a dataset with one of the specified tracking_ids already exists. By default this is false and specified datasets with a tracking_id that already exists in the org will not be ignored. If true, the existing dataset will be updated with the new dataset's details.

        Returns:
            Response data
        """
        path = f"/api/dataset/batch_create_datasets"
        params = {}
        headers = {}
        if tr_organization is not None:
            headers["TR-Organization"] = tr_organization
        json_data = {
            "datasets": datasets if datasets is not None else None,
            "upsert": upsert if upsert is not None else None,
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}

        response = self.parent._make_request(
            method="POST",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
