from typing import Any, Dict, List, Optional, Union
from src.{{ parent_class_formatted_import_path }}_client import {{ parent_class_formatted_name }}Client
from models.models import *

class {{ class_name }} ({{ formatted_title }}Client):
    """{{ class_docstring }}"""
{% for method in methods %}
    {%- set method_name = method.method_name %}
    {%- set required_params = method.required_method_params %}
    {%- set optional_params = method.optional_method_params %}
    def {{ method_name }}(
        self,
        {%- for required_param in required_params %}
        {{ required_param.name }}: {{ required_param.type }},
        {%- endfor %}
        {%- for optional_param in optional_params %}
        {{ optional_param.name }}: Optional[{{ optional_param.type }}] = None,
        {%- endfor %}
    ) -> Any:
        """
        {{ method.description }}
        {%- if method.required_method_params or method.optional_method_params or method.request_body %}

        Args:
            {%- for required_param in required_params %}
            {{ required_param.name }}: {{ required_param.description }}
            {%- endfor %}
            {%- for optional_param in optional_params %}
            {{ optional_param.name }}: {{ optional_param.description }}
            {%- endfor %}
        {%- endif %}

        Returns:
            Response data
        """
{% endfor %}
{% for operation in operations %}
        path = f"{{ operation.path }}"
        {%- if operation.parameters %}
        params = {}
        headers = {}
        {%- for param in operation.parameters %}
        {%- if param.in_location == "query" %}
        if {{ param.name }} is not None:
            params["{{ param.original_name }}"] = {{ param.name }}
        {%- endif %}
        {%- if param.in_location == "header" %}
        if {{ param.name }} is not None:
            headers["{{ param.original_name }}"] = {{ param.name }}
        {%- endif %}
        {%- endfor %}
        {%- else %}
        params = None
        headers = None
        {%- endif %}

        {%- if operation.request_body %}
        {%- if operation.request_body.length_nested_json_schemas == 1 and operation.request_body.nested_json_schemas[0].type == "object" %}
        {%- set schema = operation.request_body.nested_json_schemas[0] %}
        json_data = {
            {%- for prop_name in schema.properties %}
            "{{ prop_name }}": {{ prop_name }} if {{ prop_name }} is not None else None,
            {%- endfor %}
        }
        json_data = {k: v for k, v in json_data.items() if v is not None}
        {%- else %}
        json_data = request_body.model_dump() if request_body else None
        {%- endif %}
        {%- else %}
        json_data = None
        {%- endif %}

        response = self._make_request(
            method="{{ operation.method }}",
            path=path,
            params=params,
            headers=headers,
            json_data=json_data,
        )
        return response.json()
{% endfor %}
